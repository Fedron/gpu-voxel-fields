#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (set = 0, binding = 0) buffer World {
    uint voxels[];
};
layout (set = 0, binding = 1) buffer DistanceField {
    uint distance_field[];
};

layout(push_constant) uniform PushConstants {
    uvec3 chunk_size;
};

uint get_index(uvec3 position) {
    return position.x + position.y * chunk_size.x + position.z * chunk_size.x * chunk_size.y;
}

bool is_valid_position(ivec3 position) {
    return all(greaterThanEqual(position, ivec3(0))) && all(lessThan(position, chunk_size));
}

bool is_voxel_occupied(ivec3 position) {
    if (!is_valid_position(position))
        return true;
    return voxels[get_index(position)] > 0;
}

uint pack_distance(uint value, uint r, uint g, uint b) {
    value = value & 0xFFu;
    r = r & 0x7u;
    g = g & 0x7u;
    b = b & 0x3u;

    uint rgb = (r << 5) | (g << 2) | b;

    return (value << 8) | rgb;
}

uint manhattan_distance(ivec3 a, ivec3 b) {
    return uint(abs(b.x - a.x) + abs(b.y - a.y) + abs(b.z - a.z));
}

void main() {
    ivec3 voxel_pos = ivec3(gl_GlobalInvocationID.xyz);
    if (!is_valid_position(voxel_pos)) {
        return;
    }

    uint voxel_index = get_index(voxel_pos);
    if (is_voxel_occupied(voxel_pos)) {
        uint value;
        if (voxels[voxel_index] == 1) {
            value = pack_distance(0, 0, 0, 0);
        } else if (voxels[voxel_index] == 2) {
            value = pack_distance(0, 7, 7, 3);
        } else if (voxels[voxel_index] == 3) {
            value = pack_distance(0, 5, 5, 2);
        } else if (voxels[voxel_index] == 4) {
            value = pack_distance(0, 7, 0, 0);
        } else if (voxels[voxel_index] == 5) {
            value = pack_distance(0, 7, 0, 2);
        } else if (voxels[voxel_index] == 6) {
            value = pack_distance(0, 5, 0, 3);
        } else if (voxels[voxel_index] == 7) {
            value = pack_distance(0, 0, 0, 3);
        } else if (voxels[voxel_index] == 8) {
            value = pack_distance(0, 0, 7, 3);
        } else if (voxels[voxel_index] == 9) {
            value = pack_distance(0, 0, 7, 2);
        } else if (voxels[voxel_index] == 10) {
            value = pack_distance(0, 0, 7, 0);
        } else if (voxels[voxel_index] == 11) {
            value = pack_distance(0, 7, 7, 0);
        }

        distance_field[voxel_index] = value;
        return;
    }

    uint min_distance = max(max(chunk_size.x, chunk_size.y), chunk_size.z);
    for (int x = -1; x <= int(chunk_size.x); x++) {
        for (int y = -1; y <= int(chunk_size.y); y++) {
            for (int z = -1; z <= int(chunk_size.z); z++) {
                if (is_voxel_occupied(ivec3(x, y, z))) {
                    uint neighbour_distance = manhattan_distance(ivec3(x, y, z), voxel_pos);
                    min_distance = min(min_distance, neighbour_distance);
                }
            }
        }
    }

    distance_field[voxel_index] = pack_distance(min_distance, 0, 0, 0);
}