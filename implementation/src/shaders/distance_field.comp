#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, r8ui) writeonly uniform uimage3D distance_field;

uniform usamplerBuffer voxels;
uniform uvec3 world_size;

// Calculates the Chebyshev distance
uint dist(uvec3 a, uvec3 b) {
    return uint(max(max(abs(b.x - a.x), abs(b.y - a.y)), abs(b.z - a.z)));
}

void main() {
    // Solid voxel, don't want to calculate distance
    uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * world_size.x + gl_GlobalInvocationID.z * world_size.x * world_size.z;
    if (texelFetch(voxels, int(index)).r != 0) {
        imageStore(distance_field, ivec3(gl_GlobalInvocationID.xyz), uvec4(0));
        return;
    }

    uint min_distance = world_size.x * world_size.y * world_size.z;
    for (int x = 0; x < world_size.x; x++) {
        for (int y = 0; y < world_size.y; y++) {
            for (int z = 0; z < world_size.z; z++) {
                uint neigbour_index = x + y * world_size.x + z * world_size.x * world_size.z;
                if (texelFetch(voxels, int(neigbour_index)).r != 0) {
                    uint neighbour_distance = dist(uvec3(x, y, z), uvec3(gl_GlobalInvocationID.xyz));
                    min_distance = min(min_distance, neighbour_distance);
                }
            }
        }
    }

    imageStore(distance_field, ivec3(gl_GlobalInvocationID.xyz), uvec4(min_distance));
}