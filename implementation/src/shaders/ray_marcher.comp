#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D output_image;

const int INT_MAX = 2147483647;

int world_sdf[8] = int[8](
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1
);
vec3 world_min = vec3(0.0);
vec3 world_max = vec3(2.0);

int get_world_sdf(ivec3 pos) {
    if (pos.x >= 0 && pos.x < 2 && pos.y >= 0 && pos.y < 2 && pos.z >= 0 && pos.z < 2) {
        int index = pos.x + (pos.y * 2) + (pos.z * 4);
        return world_sdf[index];
    }
    return INT_MAX;
}

bool intersect_box(vec3 ray_origin, vec3 inv_ray_dir, vec3 box_min, vec3 box_max, out float t_enter, out float t_exit) {
    vec3 t0s = (box_min - ray_origin) * inv_ray_dir;
    vec3 t1s = (box_max - ray_origin) * inv_ray_dir;

    vec3 t_min = min(t0s, t1s);
    vec3 t_max = max(t0s, t1s);

    t_enter = max(max(t_min.x, t_min.y), t_min.z);
    t_exit = min(min(t_max.x, t_max.y), t_max.z);

    return t_enter <= t_exit && t_exit >= 0.0;
}

vec3 calculate_normal(vec3 p) {
    const ivec3 delta = ivec3(1.0, 0.0, 0.0);
    ivec3 pos = ivec3(p);

    float gradient_x = float(get_world_sdf(pos + delta.xyy)) - float(get_world_sdf(pos - delta.xyy));
    float gradient_y = float(get_world_sdf(pos + delta.yxy)) - float(get_world_sdf(pos - delta.yxy));
    float gradient_z = float(get_world_sdf(pos + delta.yyx)) - float(get_world_sdf(pos - delta.yyx));

    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);
    return normalize(normal);
}

float ray_march(vec3 ray_origin, vec3 ray_dir, out vec3 normal, float t_enter, float t_exit, int max_steps) {
    float t = t_enter;
    
    for (int i = 0; i < max_steps; i++) {
        vec3 pos = ray_origin + t * ray_dir;
        int sdf = get_world_sdf(ivec3(pos));

        if (sdf == 0) {
            normal = calculate_normal(pos);
            return t;
        } else if (sdf == INT_MAX) {
            break;
        }

        t += float(sdf);

        if (t > t_exit) {
            break;
        }

    }

    return t_exit;
}

void main() {
    vec2 uv = (gl_GlobalInvocationID.xy -0.5 * vec2(1024.0)) / 1024.0;
    vec3 ray_origin = vec3(0.0, 0.0, -5.0);
    vec3 ray_direction = normalize(vec3(uv, 1.0));
    vec3 inv_ray_direction = 1.0 / ray_direction;

    float t_enter, t_exit;
    bool hit_world = intersect_box(ray_origin, inv_ray_direction, world_min, world_max, t_enter, t_exit);

    vec3 color = vec3(0.0);
    if (hit_world) {
        vec3 normal;
        float hit_dist = ray_march(ray_origin, ray_direction, normal, t_enter, t_exit, 16);
        if (hit_dist < t_exit) {
            vec3 light_dir = normalize(vec3(1.0, 1.0, -1.0));
            float diffuse = max(dot(normal, light_dir), 0.0);
            color = vec3(diffuse);
        }
    }
    imageStore(output_image, ivec2(gl_GlobalInvocationID.xy), vec4(color, 0.0));
}